// megafunction wizard: %ALTGX_RECONFIG%
// GENERATION: STANDARD
// VERSION: WM1.0
// MODULE: alt_c3gxb_reconfig 

// ============================================================
// File Name: c4gxb_altpll_reconfig.v
// Megafunction Name(s):
// 			alt_c3gxb_reconfig
//
// Simulation Library Files(s):
// 			altera_mf;lpm
// ============================================================
// ************************************************************
// THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
//
// 10.0 Build 218 06/27/2010 SP 0.10 SJ Full Version
// ************************************************************


//Copyright (C) 1991-2010 Altera Corporation
//Your use of Altera Corporation's design tools, logic functions 
//and other software and tools, and its AMPP partner logic 
//functions, and any output files from any of the foregoing 
//(including device programming or simulation files), and any 
//associated documentation or information are expressly subject 
//to the terms and conditions of the Altera Program License 
//Subscription Agreement, Altera MegaCore Function License 
//Agreement, or other applicable license agreement, including, 
//without limitation, that your use is for the sole purpose of 
//programming logic devices manufactured by Altera and sold by 
//Altera or its authorized distributors.  Please refer to the 
//applicable agreement for further details.


//alt_c3gxb_reconfig CBX_AUTO_BLACKBOX="ALL" CHANNEL_ADDRESS_WIDTH=4 DEVICE_FAMILY="Cyclone IV GX" ENABLE_BUF_CAL="TRUE" MIF_ADDRESS_WIDTH=6 NUMBER_OF_CHANNELS=16 NUMBER_OF_RECONFIG_PORTS=4 RECONFIG_FROMGXB_WIDTH=20 RECONFIG_TOGXB_WIDTH=4 busy channel_reconfig_done logical_channel_address reconfig_address_en reconfig_address_out reconfig_clk reconfig_data reconfig_fromgxb reconfig_mode_sel reconfig_togxb reset_reconfig_address write_all
//VERSION_BEGIN 10.0 cbx_alt_c3gxb_reconfig 2010:06:27:21:14:02:SJ cbx_alt_cal 2010:06:27:21:14:02:SJ cbx_alt_dprio 2010:06:27:21:14:02:SJ cbx_altsyncram 2010:06:27:21:14:02:SJ cbx_cycloneii 2010:06:27:21:14:02:SJ cbx_lpm_add_sub 2010:06:27:21:14:02:SJ cbx_lpm_compare 2010:06:27:21:14:02:SJ cbx_lpm_counter 2010:06:27:21:14:02:SJ cbx_lpm_decode 2010:06:27:21:14:02:SJ cbx_lpm_mux 2010:06:27:21:14:02:SJ cbx_lpm_shiftreg 2010:06:27:21:14:02:SJ cbx_mgl 2010:06:27:21:18:40:SJ cbx_stratix 2010:06:27:21:14:02:SJ cbx_stratixii 2010:06:27:21:14:02:SJ cbx_stratixiii 2010:06:27:21:14:02:SJ cbx_stratixv 2010:06:27:21:14:02:SJ cbx_util_mgl 2010:06:27:21:14:02:SJ  VERSION_END
// synthesis VERILOG_INPUT_VERSION VERILOG_2001
// altera message_off 10463



//alt_dprio address_width=16 CBX_AUTO_BLACKBOX="ALL" device_family="Cyclone IV GX" quad_address_width=9 address busy datain dataout dpclk dpriodisable dprioin dprioload dprioout quad_address rden reset status_out wren wren_data
//VERSION_BEGIN 10.0 cbx_alt_dprio 2010:06:27:21:14:02:SJ cbx_cycloneii 2010:06:27:21:14:02:SJ cbx_lpm_add_sub 2010:06:27:21:14:02:SJ cbx_lpm_compare 2010:06:27:21:14:02:SJ cbx_lpm_counter 2010:06:27:21:14:02:SJ cbx_lpm_decode 2010:06:27:21:14:02:SJ cbx_lpm_shiftreg 2010:06:27:21:14:02:SJ cbx_mgl 2010:06:27:21:18:40:SJ cbx_stratix 2010:06:27:21:14:02:SJ cbx_stratixii 2010:06:27:21:14:02:SJ  VERSION_END

//synthesis_resources = lpm_compare 3 lpm_counter 1 lpm_decode 1 lut 1 reg 102 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"{-to addr_shift_reg[31]} DPRIO_INTERFACE_REG=ON;{-to wr_out_data_shift_reg[31]} DPRIO_INTERFACE_REG=ON;{-to rd_out_data_shift_reg[13]} DPRIO_INTERFACE_REG=ON;{-to in_data_shift_reg[0]} DPRIO_INTERFACE_REG=ON;{-to startup_cntr[0]} DPRIO_INTERFACE_REG=ON;{-to startup_cntr[1]} DPRIO_INTERFACE_REG=ON;{-to startup_cntr[2]} DPRIO_INTERFACE_REG=ON"} *)
module  c4gxb_altpll_reconfig_alt_dprio_q9l
	( 
	address,
	busy,
	datain,
	dataout,
	dpclk,
	dpriodisable,
	dprioin,
	dprioload,
	dprioout,
	quad_address,
	rden,
	reset,
	status_out,
	wren,
	wren_data) /* synthesis synthesis_clearbox=2 */;
	input   [15:0]  address;
	output   busy;
	input   [15:0]  datain;
	output   [15:0]  dataout;
	input   dpclk;
	output   dpriodisable;
	output   dprioin;
	output   dprioload;
	input   dprioout;
	input   [8:0]  quad_address;
	input   rden;
	input   reset;
	output   [3:0]  status_out;
	input   wren;
	input   wren_data;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   [15:0]  datain;
	tri0   rden;
	tri0   reset;
	tri0   wren;
	tri0   wren_data;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	(* ALTERA_ATTRIBUTE = {"PRESERVE_REGISTER=ON;POWER_UP_LEVEL=LOW"} *)
	reg	[31:0]	addr_shift_reg;
	(* ALTERA_ATTRIBUTE = {"PRESERVE_REGISTER=ON;POWER_UP_LEVEL=LOW"} *)
	reg	[15:0]	in_data_shift_reg;
	(* ALTERA_ATTRIBUTE = {"PRESERVE_REGISTER=ON;POWER_UP_LEVEL=LOW"} *)
	reg	[15:0]	rd_out_data_shift_reg;
	wire	[2:0]	wire_startup_cntr_d;
	(* ALTERA_ATTRIBUTE = {"PRESERVE_REGISTER=ON;POWER_UP_LEVEL=LOW"} *)
	reg	[2:0]	startup_cntr;
	wire	[2:0]	wire_startup_cntr_ena;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	[2:0]	state_mc_reg;
	(* ALTERA_ATTRIBUTE = {"PRESERVE_REGISTER=ON;POWER_UP_LEVEL=LOW"} *)
	reg	[31:0]	wr_out_data_shift_reg;
	wire  wire_pre_amble_cmpr_aeb;
	wire  wire_pre_amble_cmpr_agb;
	wire  wire_rd_data_output_cmpr_ageb;
	wire  wire_rd_data_output_cmpr_alb;
	wire  wire_state_mc_cmpr_aeb;
	wire  [5:0]   wire_state_mc_counter_q;
	wire  [7:0]   wire_state_mc_decode_eq;
	wire	wire_dprioin_mux_dataout;
	wire  busy_state;
	wire  idle_state;
	wire  rd_addr_done;
	wire  rd_addr_state;
	wire  rd_data_done;
	wire  rd_data_input_state;
	wire  rd_data_output_state;
	wire  rd_data_state;
	wire rdinc;
	wire  read_state;
	wire  s0_to_0;
	wire  s0_to_1;
	wire  s1_to_0;
	wire  s1_to_1;
	wire  s2_to_0;
	wire  s2_to_1;
	wire  startup_done;
	wire  startup_idle;
	wire  wr_addr_done;
	wire  wr_addr_state;
	wire  wr_data_done;
	wire  wr_data_state;
	wire  write_state;

	// synopsys translate_off
	initial
		addr_shift_reg = 0;
	// synopsys translate_on
	always @ ( posedge dpclk or  posedge reset)
		if (reset == 1'b1) addr_shift_reg <= 32'b0;
		else
			if (wire_pre_amble_cmpr_aeb == 1'b1) addr_shift_reg <= {{2{{2{1'b0}}}}, 1'b0, quad_address[8:0], 2'b10, address};
			else  addr_shift_reg <= {addr_shift_reg[30:0], 1'b0};
	// synopsys translate_off
	initial
		in_data_shift_reg = 0;
	// synopsys translate_on
	always @ ( posedge dpclk or  posedge reset)
		if (reset == 1'b1) in_data_shift_reg <= 16'b0;
		else if  (rd_data_input_state == 1'b1)   in_data_shift_reg <= {in_data_shift_reg[14:0], dprioout};
	// synopsys translate_off
	initial
		rd_out_data_shift_reg = 0;
	// synopsys translate_on
	always @ ( posedge dpclk or  posedge reset)
		if (reset == 1'b1) rd_out_data_shift_reg <= 16'b0;
		else
			if (wire_pre_amble_cmpr_aeb == 1'b1) rd_out_data_shift_reg <= {{2{1'b0}}, {2{1'b1}}, 1'b0, quad_address, 2'b10};
			else  rd_out_data_shift_reg <= {rd_out_data_shift_reg[14:0], 1'b0};
	// synopsys translate_off
	initial
		startup_cntr[0:0] = 0;
	// synopsys translate_on
	always @ ( posedge dpclk)
		if (wire_startup_cntr_ena[0:0] == 1'b1) 
			if (reset == 1'b1) startup_cntr[0:0] <= 1'b0;
			else  startup_cntr[0:0] <= wire_startup_cntr_d[0:0];
	// synopsys translate_off
	initial
		startup_cntr[1:1] = 0;
	// synopsys translate_on
	always @ ( posedge dpclk)
		if (wire_startup_cntr_ena[1:1] == 1'b1) 
			if (reset == 1'b1) startup_cntr[1:1] <= 1'b0;
			else  startup_cntr[1:1] <= wire_startup_cntr_d[1:1];
	// synopsys translate_off
	initial
		startup_cntr[2:2] = 0;
	// synopsys translate_on
	always @ ( posedge dpclk)
		if (wire_startup_cntr_ena[2:2] == 1'b1) 
			if (reset == 1'b1) startup_cntr[2:2] <= 1'b0;
			else  startup_cntr[2:2] <= wire_startup_cntr_d[2:2];
	assign
		wire_startup_cntr_d = {(startup_cntr[2] ^ (startup_cntr[1] & startup_cntr[0])), (startup_cntr[0] ^ startup_cntr[1]), (~ startup_cntr[0])};
	assign
		wire_startup_cntr_ena = {3{((((rden | wren) | rdinc) | (~ startup_idle)) & (~ startup_done))}};
	// synopsys translate_off
	initial
		state_mc_reg = 0;
	// synopsys translate_on
	always @ ( posedge dpclk or  posedge reset)
		if (reset == 1'b1) state_mc_reg <= 3'b0;
		else  state_mc_reg <= {(s2_to_1 | (((~ s2_to_0) & (~ s2_to_1)) & state_mc_reg[2])), (s1_to_1 | (((~ s1_to_0) & (~ s1_to_1)) & state_mc_reg[1])), (s0_to_1 | (((~ s0_to_0) & (~ s0_to_1)) & state_mc_reg[0]))};
	// synopsys translate_off
	initial
		wr_out_data_shift_reg = 0;
	// synopsys translate_on
	always @ ( posedge dpclk or  posedge reset)
		if (reset == 1'b1) wr_out_data_shift_reg <= 32'b0;
		else
			if (wire_pre_amble_cmpr_aeb == 1'b1) wr_out_data_shift_reg <= {{2{1'b0}}, 2'b01, 1'b0, quad_address[8:0], 2'b10, datain};
			else  wr_out_data_shift_reg <= {wr_out_data_shift_reg[30:0], 1'b0};
	lpm_compare   pre_amble_cmpr
	( 
	.aeb(wire_pre_amble_cmpr_aeb),
	.agb(wire_pre_amble_cmpr_agb),
	.ageb(),
	.alb(),
	.aleb(),
	.aneb(),
	.dataa(wire_state_mc_counter_q),
	.datab(6'b011111)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		pre_amble_cmpr.lpm_width = 6,
		pre_amble_cmpr.lpm_type = "lpm_compare";
	lpm_compare   rd_data_output_cmpr
	( 
	.aeb(),
	.agb(),
	.ageb(wire_rd_data_output_cmpr_ageb),
	.alb(wire_rd_data_output_cmpr_alb),
	.aleb(),
	.aneb(),
	.dataa(wire_state_mc_counter_q),
	.datab(6'b110000)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		rd_data_output_cmpr.lpm_width = 6,
		rd_data_output_cmpr.lpm_type = "lpm_compare";
	lpm_compare   state_mc_cmpr
	( 
	.aeb(wire_state_mc_cmpr_aeb),
	.agb(),
	.ageb(),
	.alb(),
	.aleb(),
	.aneb(),
	.dataa(wire_state_mc_counter_q),
	.datab({6{1'b1}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		state_mc_cmpr.lpm_width = 6,
		state_mc_cmpr.lpm_type = "lpm_compare";
	lpm_counter   state_mc_counter
	( 
	.clock(dpclk),
	.cnt_en((write_state | read_state)),
	.cout(),
	.eq(),
	.q(wire_state_mc_counter_q),
	.sclr(reset)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.aload(1'b0),
	.aset(1'b0),
	.cin(1'b1),
	.clk_en(1'b1),
	.data({6{1'b0}}),
	.sload(1'b0),
	.sset(1'b0),
	.updown(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		state_mc_counter.lpm_port_updown = "PORT_UNUSED",
		state_mc_counter.lpm_width = 6,
		state_mc_counter.lpm_type = "lpm_counter";
	lpm_decode   state_mc_decode
	( 
	.data(state_mc_reg),
	.eq(wire_state_mc_decode_eq)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0),
	.enable(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		state_mc_decode.lpm_decodes = 8,
		state_mc_decode.lpm_width = 3,
		state_mc_decode.lpm_type = "lpm_decode";
	or(wire_dprioin_mux_dataout, ((((((wr_addr_state | rd_addr_state) & addr_shift_reg[31]) & wire_pre_amble_cmpr_agb) | ((~ wire_pre_amble_cmpr_agb) & (wr_addr_state | rd_addr_state))) | (((wr_data_state & wr_out_data_shift_reg[31]) & wire_pre_amble_cmpr_agb) | ((~ wire_pre_amble_cmpr_agb) & wr_data_state))) | (((rd_data_output_state & rd_out_data_shift_reg[15]) & wire_pre_amble_cmpr_agb) | ((~ wire_pre_amble_cmpr_agb) & rd_data_output_state))), ~(((write_state | rd_addr_state) | rd_data_output_state)));
	assign
		busy = busy_state,
		busy_state = (write_state | read_state),
		dataout = in_data_shift_reg,
		dpriodisable = (~ (startup_cntr[2] & (startup_cntr[0] | startup_cntr[1]))),
		dprioin = wire_dprioin_mux_dataout,
		dprioload = (~ ((startup_cntr[0] ^ startup_cntr[1]) & (~ startup_cntr[2]))),
		idle_state = wire_state_mc_decode_eq[0],
		rd_addr_done = (rd_addr_state & wire_state_mc_cmpr_aeb),
		rd_addr_state = (wire_state_mc_decode_eq[5] & startup_done),
		rd_data_done = (rd_data_state & wire_state_mc_cmpr_aeb),
		rd_data_input_state = (wire_rd_data_output_cmpr_ageb & rd_data_state),
		rd_data_output_state = (wire_rd_data_output_cmpr_alb & rd_data_state),
		rd_data_state = (wire_state_mc_decode_eq[7] & startup_done),
		rdinc = 1'b0,
		read_state = (rd_addr_state | rd_data_state),
		s0_to_0 = ((wr_data_state & wr_data_done) | (rd_data_state & rd_data_done)),
		s0_to_1 = (((idle_state & (wren | ((~ wren) & ((rden | rdinc) | wren_data)))) | (wr_addr_state & wr_addr_done)) | (rd_addr_state & rd_addr_done)),
		s1_to_0 = (((wr_data_state & wr_data_done) | (rd_data_state & rd_data_done)) | (idle_state & (wren | (((~ wren) & (~ wren_data)) & rden)))),
		s1_to_1 = (((idle_state & ((~ wren) & (rdinc | wren_data))) | (wr_addr_state & wr_addr_done)) | (rd_addr_state & rd_addr_done)),
		s2_to_0 = ((((wr_addr_state & wr_addr_done) | (wr_data_state & wr_data_done)) | (rd_data_state & rd_data_done)) | (idle_state & (wren | wren_data))),
		s2_to_1 = ((idle_state & (((~ wren) & (~ wren_data)) & (rdinc | rden))) | (rd_addr_state & rd_addr_done)),
		startup_done = ((startup_cntr[2] & (~ startup_cntr[0])) & startup_cntr[1]),
		startup_idle = ((~ startup_cntr[0]) & (~ (startup_cntr[2] ^ startup_cntr[1]))),
		status_out = {rd_data_done, rd_addr_done, wr_data_done, wr_addr_done},
		wr_addr_done = (wr_addr_state & wire_state_mc_cmpr_aeb),
		wr_addr_state = (wire_state_mc_decode_eq[1] & startup_done),
		wr_data_done = (wr_data_state & wire_state_mc_cmpr_aeb),
		wr_data_state = (wire_state_mc_decode_eq[3] & startup_done),
		write_state = (wr_addr_state | wr_data_state);
endmodule //c4gxb_altpll_reconfig_alt_dprio_q9l


//lpm_mux CBX_AUTO_BLACKBOX="ALL" DEVICE_FAMILY="Cyclone IV GX" LPM_SIZE=6 LPM_WIDTH=6 LPM_WIDTHS=3 data result sel
//VERSION_BEGIN 10.0 cbx_lpm_mux 2010:06:27:21:14:02:SJ cbx_mgl 2010:06:27:21:18:40:SJ  VERSION_END

//synthesis_resources = lut 30 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  c4gxb_altpll_reconfig_mux_cda
	( 
	data,
	result,
	sel) ;
	input   [35:0]  data;
	output   [5:0]  result;
	input   [2:0]  sel;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   [35:0]  data;
	tri0   [2:0]  sel;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [5:0]  result_node;
	wire  [2:0]  sel_ffs_wire;
	wire  [2:0]  sel_node;
	wire  [7:0]  w_data1148w;
	wire  [3:0]  w_data1168w;
	wire  [3:0]  w_data1169w;
	wire  [7:0]  w_data1217w;
	wire  [3:0]  w_data1237w;
	wire  [3:0]  w_data1238w;
	wire  [7:0]  w_data1284w;
	wire  [3:0]  w_data1304w;
	wire  [3:0]  w_data1305w;
	wire  [7:0]  w_data1351w;
	wire  [3:0]  w_data1371w;
	wire  [3:0]  w_data1372w;
	wire  [7:0]  w_data1418w;
	wire  [3:0]  w_data1438w;
	wire  [3:0]  w_data1439w;
	wire  [7:0]  w_data1485w;
	wire  [3:0]  w_data1505w;
	wire  [3:0]  w_data1506w;
	wire  [1:0]  w_sel1170w;
	wire  [1:0]  w_sel1239w;
	wire  [1:0]  w_sel1306w;
	wire  [1:0]  w_sel1373w;
	wire  [1:0]  w_sel1440w;
	wire  [1:0]  w_sel1507w;

	assign
		result = result_node,
		result_node = {((sel_node[2] & (((w_data1506w[1] & w_sel1507w[0]) & (~ (((w_data1506w[0] & (~ w_sel1507w[1])) & (~ w_sel1507w[0])) | (w_sel1507w[1] & (w_sel1507w[0] | w_data1506w[2]))))) | ((((w_data1506w[0] & (~ w_sel1507w[1])) & (~ w_sel1507w[0])) | (w_sel1507w[1] & (w_sel1507w[0] | w_data1506w[2]))) & (w_data1506w[3] | (~ w_sel1507w[0]))))) | ((~ sel_node[2]) & (((w_data1505w[1] & w_sel1507w[0]) & (~ (((w_data1505w[0] & (~ w_sel1507w[1])) & (~ w_sel1507w[0])) | (w_sel1507w[1] & (w_sel1507w[0] | w_data1505w[2]))))) | ((((w_data1505w[0] & (~ w_sel1507w[1])) & (~ w_sel1507w[0])) | (w_sel1507w[1] & (w_sel1507w[0] | w_data1505w[2]))) & (w_data1505w[3] | (~ w_sel1507w[0])))))), ((sel_node[2] & (((w_data1439w[1] & w_sel1440w[0]) & (~ (((w_data1439w[0] & (~ w_sel1440w[1])) & (~ w_sel1440w[0])) | (w_sel1440w[1] & (w_sel1440w[0] | w_data1439w[2]))))) | ((((w_data1439w[0] & (~ w_sel1440w[1])) & (~ w_sel1440w[0])) | (w_sel1440w[1] & (w_sel1440w[0] | w_data1439w[2]))) & (w_data1439w[3] | (~ w_sel1440w[0]))))) | ((~ sel_node[2]) & (((w_data1438w[1] & w_sel1440w[0]) & (~ (((w_data1438w[0] & (~ w_sel1440w[1])) & (~ w_sel1440w[0])) | (w_sel1440w[1] & (w_sel1440w[0] | w_data1438w[2]))))) | ((((w_data1438w[0] & (~ w_sel1440w[1])) & (~ w_sel1440w[0])) | (w_sel1440w[1] & (w_sel1440w[0] | w_data1438w[2]))) & (w_data1438w[3] | (~ w_sel1440w[0])))))), ((sel_node[2] & (((w_data1372w[1] & w_sel1373w[0]) & (~ (((w_data1372w[0] & (~ w_sel1373w[1])) & (~ w_sel1373w[0])) | (w_sel1373w[1] & (w_sel1373w[0] | w_data1372w[2]))))) | ((((w_data1372w[0] & (~ w_sel1373w[1])) & (~ w_sel1373w[0])) | (w_sel1373w[1] & (w_sel1373w[0] | w_data1372w[2]))) & (w_data1372w[3] | (~ w_sel1373w[0]))))) | ((~ sel_node[2]) & (((w_data1371w[1] & w_sel1373w[0]) & (~ (((w_data1371w[0] & (~ w_sel1373w[1])) & (~ w_sel1373w[0])) | (w_sel1373w[1] & (w_sel1373w[0] | w_data1371w[2]))))) | ((((w_data1371w[0] & (~ w_sel1373w[1])) & (~ w_sel1373w[0])) | (w_sel1373w[1] & (w_sel1373w[0] | w_data1371w[2]))) & (w_data1371w[3] | (~ w_sel1373w[0])))))), ((sel_node[2] & (((w_data1305w[1]
 & w_sel1306w[0]) & (~ (((w_data1305w[0] & (~ w_sel1306w[1])) & (~ w_sel1306w[0])) | (w_sel1306w[1] & (w_sel1306w[0] | w_data1305w[2]))))) | ((((w_data1305w[0] & (~ w_sel1306w[1])) & (~ w_sel1306w[0])) | (w_sel1306w[1] & (w_sel1306w[0] | w_data1305w[2]))) & (w_data1305w[3] | (~ w_sel1306w[0]))))) | ((~ sel_node[2]) & (((w_data1304w[1] & w_sel1306w[0]) & (~ (((w_data1304w[0] & (~ w_sel1306w[1])) & (~ w_sel1306w[0])) | (w_sel1306w[1] & (w_sel1306w[0] | w_data1304w[2]))))) | ((((w_data1304w[0] & (~ w_sel1306w[1])) & (~ w_sel1306w[0])) | (w_sel1306w[1] & (w_sel1306w[0] | w_data1304w[2]))) & (w_data1304w[3] | (~ w_sel1306w[0])))))), ((sel_node[2] & (((w_data1238w[1] & w_sel1239w[0]) & (~ (((w_data1238w[0] & (~ w_sel1239w[1])) & (~ w_sel1239w[0])) | (w_sel1239w[1] & (w_sel1239w[0] | w_data1238w[2]))))) | ((((w_data1238w[0] & (~ w_sel1239w[1])) & (~ w_sel1239w[0])) | (w_sel1239w[1] & (w_sel1239w[0] | w_data1238w[2]))) & (w_data1238w[3] | (~ w_sel1239w[0]))))) | ((~ sel_node[2]) & (((w_data1237w[1] & w_sel1239w[0]) & (~ (((w_data1237w[0] & (~ w_sel1239w[1])) & (~ w_sel1239w[0])) | (w_sel1239w[1] & (w_sel1239w[0] | w_data1237w[2]))))) | ((((w_data1237w[0] & (~ w_sel1239w[1])) & (~ w_sel1239w[0])) | (w_sel1239w[1] & (w_sel1239w[0] | w_data1237w[2]))) & (w_data1237w[3] | (~ w_sel1239w[0])))))), ((sel_node[2] & (((w_data1169w[1] & w_sel1170w[0]) & (~ (((w_data1169w[0] & (~ w_sel1170w[1])) & (~ w_sel1170w[0])) | (w_sel1170w[1] & (w_sel1170w[0] | w_data1169w[2]))))) | ((((w_data1169w[0] & (~ w_sel1170w[1])) & (~ w_sel1170w[0])) | (w_sel1170w[1] & (w_sel1170w[0] | w_data1169w[2]))) & (w_data1169w[3] | (~ w_sel1170w[0]))))) | ((~ sel_node[2]) & (((w_data1168w[1] & w_sel1170w[0]) & (~ (((w_data1168w[0] & (~ w_sel1170w[1])) & (~ w_sel1170w[0])) | (w_sel1170w[1] & (w_sel1170w[0] | w_data1168w[2]))))) | ((((w_data1168w[0] & (~ w_sel1170w[1])) & (~ w_sel1170w[0])) | (w_sel1170w[1] & (w_sel1170w[0] | w_data1168w[2]))) & (w_data1168w[3] | (~ w_sel1170w[0]))))))},
		sel_ffs_wire = {sel[2:0]},
		sel_node = {sel_ffs_wire[2], sel[1:0]},
		w_data1148w = {{2{1'b0}}, data[30], data[24], data[18], data[12], data[6], data[0]},
		w_data1168w = w_data1148w[3:0],
		w_data1169w = w_data1148w[7:4],
		w_data1217w = {{2{1'b0}}, data[31], data[25], data[19], data[13], data[7], data[1]},
		w_data1237w = w_data1217w[3:0],
		w_data1238w = w_data1217w[7:4],
		w_data1284w = {{2{1'b0}}, data[32], data[26], data[20], data[14], data[8], data[2]},
		w_data1304w = w_data1284w[3:0],
		w_data1305w = w_data1284w[7:4],
		w_data1351w = {{2{1'b0}}, data[33], data[27], data[21], data[15], data[9], data[3]},
		w_data1371w = w_data1351w[3:0],
		w_data1372w = w_data1351w[7:4],
		w_data1418w = {{2{1'b0}}, data[34], data[28], data[22], data[16], data[10], data[4]},
		w_data1438w = w_data1418w[3:0],
		w_data1439w = w_data1418w[7:4],
		w_data1485w = {{2{1'b0}}, data[35], data[29], data[23], data[17], data[11], data[5]},
		w_data1505w = w_data1485w[3:0],
		w_data1506w = w_data1485w[7:4],
		w_sel1170w = sel_node[1:0],
		w_sel1239w = sel_node[1:0],
		w_sel1306w = sel_node[1:0],
		w_sel1373w = sel_node[1:0],
		w_sel1440w = sel_node[1:0],
		w_sel1507w = sel_node[1:0];
endmodule //c4gxb_altpll_reconfig_mux_cda


//lpm_mux CBX_AUTO_BLACKBOX="ALL" DEVICE_FAMILY="Cyclone IV GX" LPM_SIZE=4 LPM_WIDTH=1 LPM_WIDTHS=2 data result sel
//VERSION_BEGIN 10.0 cbx_lpm_mux 2010:06:27:21:14:02:SJ cbx_mgl 2010:06:27:21:18:40:SJ  VERSION_END

//synthesis_resources = lut 2 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  c4gxb_altpll_reconfig_mux_4da
	( 
	data,
	result,
	sel) ;
	input   [3:0]  data;
	output   [0:0]  result;
	input   [1:0]  sel;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   [3:0]  data;
	tri0   [1:0]  sel;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [0:0]  result_node;
	wire  [1:0]  sel_node;
	wire  [3:0]  w_data1555w;

	assign
		result = result_node,
		result_node = {(((w_data1555w[1] & sel_node[0]) & (~ (((w_data1555w[0] & (~ sel_node[1])) & (~ sel_node[0])) | (sel_node[1] & (sel_node[0] | w_data1555w[2]))))) | ((((w_data1555w[0] & (~ sel_node[1])) & (~ sel_node[0])) | (sel_node[1] & (sel_node[0] | w_data1555w[2]))) & (w_data1555w[3] | (~ sel_node[0]))))},
		sel_node = {sel[1:0]},
		w_data1555w = {data[3:0]};
endmodule //c4gxb_altpll_reconfig_mux_4da


//lpm_mux CBX_AUTO_BLACKBOX="ALL" DEVICE_FAMILY="Cyclone IV GX" LPM_SIZE=4 LPM_WIDTH=5 LPM_WIDTHS=2 data result sel
//VERSION_BEGIN 10.0 cbx_lpm_mux 2010:06:27:21:14:02:SJ cbx_mgl 2010:06:27:21:18:40:SJ  VERSION_END

//synthesis_resources = lut 10 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  c4gxb_altpll_reconfig_mux_8da
	( 
	data,
	result,
	sel) ;
	input   [19:0]  data;
	output   [4:0]  result;
	input   [1:0]  sel;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   [19:0]  data;
	tri0   [1:0]  sel;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [4:0]  result_node;
	wire  [1:0]  sel_node;
	wire  [3:0]  w_data1591w;
	wire  [3:0]  w_data1621w;
	wire  [3:0]  w_data1646w;
	wire  [3:0]  w_data1671w;
	wire  [3:0]  w_data1696w;

	assign
		result = result_node,
		result_node = {(((w_data1696w[1] & sel_node[0]) & (~ (((w_data1696w[0] & (~ sel_node[1])) & (~ sel_node[0])) | (sel_node[1] & (sel_node[0] | w_data1696w[2]))))) | ((((w_data1696w[0] & (~ sel_node[1])) & (~ sel_node[0])) | (sel_node[1] & (sel_node[0] | w_data1696w[2]))) & (w_data1696w[3] | (~ sel_node[0])))), (((w_data1671w[1] & sel_node[0]) & (~ (((w_data1671w[0] & (~ sel_node[1])) & (~ sel_node[0])) | (sel_node[1] & (sel_node[0] | w_data1671w[2]))))) | ((((w_data1671w[0] & (~ sel_node[1])) & (~ sel_node[0])) | (sel_node[1] & (sel_node[0] | w_data1671w[2]))) & (w_data1671w[3] | (~ sel_node[0])))), (((w_data1646w[1] & sel_node[0]) & (~ (((w_data1646w[0] & (~ sel_node[1])) & (~ sel_node[0])) | (sel_node[1] & (sel_node[0] | w_data1646w[2]))))) | ((((w_data1646w[0] & (~ sel_node[1])) & (~ sel_node[0])) | (sel_node[1] & (sel_node[0] | w_data1646w[2]))) & (w_data1646w[3] | (~ sel_node[0])))), (((w_data1621w[1] & sel_node[0]) & (~ (((w_data1621w[0] & (~ sel_node[1])) & (~ sel_node[0])) | (sel_node[1] & (sel_node[0] | w_data1621w[2]))))) | ((((w_data1621w[0] & (~ sel_node[1])) & (~ sel_node[0])) | (sel_node[1] & (sel_node[0] | w_data1621w[2]))) & (w_data1621w[3] | (~ sel_node[0])))), (((w_data1591w[1] & sel_node[0]) & (~ (((w_data1591w[0] & (~ sel_node[1])) & (~ sel_node[0])) | (sel_node[1] & (sel_node[0] | w_data1591w[2]))))) | ((((w_data1591w[0] & (~ sel_node[1])) & (~ sel_node[0])) | (sel_node[1] & (sel_node[0] | w_data1591w[2]))) & (w_data1591w[3] | (~ sel_node[0]))))},
		sel_node = {sel[1:0]},
		w_data1591w = {data[15], data[10], data[5], data[0]},
		w_data1621w = {data[16], data[11], data[6], data[1]},
		w_data1646w = {data[17], data[12], data[7], data[2]},
		w_data1671w = {data[18], data[13], data[8], data[3]},
		w_data1696w = {data[19], data[14], data[9], data[4]};
endmodule //c4gxb_altpll_reconfig_mux_8da

//synthesis_resources = alt_cal_c3gxb 1 lpm_add_sub 1 lpm_compare 21 lpm_counter 4 lpm_decode 3 lut 43 reg 164 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"{-to address_pres_reg[11]} DPRIO_CHANNEL_NUM=11;{-to address_pres_reg[10]} DPRIO_CHANNEL_NUM=10;{-to address_pres_reg[9]} DPRIO_CHANNEL_NUM=9;{-to address_pres_reg[8]} DPRIO_CHANNEL_NUM=8;{-to address_pres_reg[7]} DPRIO_CHANNEL_NUM=7;{-to address_pres_reg[6]} DPRIO_CHANNEL_NUM=6;{-to address_pres_reg[5]} DPRIO_CHANNEL_NUM=5;{-to address_pres_reg[4]} DPRIO_CHANNEL_NUM=4;{-to address_pres_reg[3]} DPRIO_CHANNEL_NUM=3;{-to address_pres_reg[2]} DPRIO_CHANNEL_NUM=2;{-to address_pres_reg[1]} DPRIO_CHANNEL_NUM=1;{-to address_pres_reg[0]} DPRIO_CHANNEL_NUM=0"} *)
module  c4gxb_altpll_reconfig_alt_c3gxb_reconfig_u4a1
	( 
	busy,
	channel_reconfig_done,
	logical_channel_address,
	reconfig_address_en,
	reconfig_address_out,
	reconfig_clk,
	reconfig_data,
	reconfig_fromgxb,
	reconfig_mode_sel,
	reconfig_togxb,
	reset_reconfig_address,
	write_all) /* synthesis synthesis_clearbox=2 */;
	output   busy;
	output   channel_reconfig_done;
	input   [3:0]  logical_channel_address;
	output   reconfig_address_en;
	output   [5:0]  reconfig_address_out;
	input   reconfig_clk;
	input   [15:0]  reconfig_data;
	input   [19:0]  reconfig_fromgxb;
	input   [2:0]  reconfig_mode_sel;
	output   [3:0]  reconfig_togxb;
	input   reset_reconfig_address;
	input   write_all;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   [3:0]  logical_channel_address;
	tri0   [15:0]  reconfig_data;
	tri0   [2:0]  reconfig_mode_sel;
	tri0   reset_reconfig_address;
	tri0   write_all;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  wire_calibration_c3gxb_busy;
	wire  [15:0]   wire_calibration_c3gxb_dprio_addr;
	wire  [15:0]   wire_calibration_c3gxb_dprio_dataout;
	wire  wire_calibration_c3gxb_dprio_rden;
	wire  wire_calibration_c3gxb_dprio_wren;
	wire  [8:0]   wire_calibration_c3gxb_quad_addr;
	wire  wire_calibration_c3gxb_retain_addr;
	wire  wire_dprio_busy;
	wire  [15:0]   wire_dprio_dataout;
	wire  wire_dprio_dpriodisable;
	wire  wire_dprio_dprioin;
	wire  wire_dprio_dprioload;
	wire  [3:0]   wire_dprio_status_out;
	(* ALTERA_ATTRIBUTE = {"PRESERVE_REGISTER=ON"} *)
	reg	[11:0]	address_pres_reg;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	delay_mif_head;
	wire	wire_delay_mif_head_ena;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	delay_second_mif_head;
	wire	wire_delay_second_mif_head_ena;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	[15:0]	dprio_dataout_reg;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	dprio_pulse_reg;
	wire	wire_dprio_pulse_reg_ena;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	end_mif_reg;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	mif_stage;
	wire	wire_mif_stage_sclr;
	wire	[3:0]	wire_mif_type_reg_d;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	[3:0]	mif_type_reg;
	wire	[3:0]	wire_mif_type_reg_ena;
	wire	[3:0]	wire_mif_type_reg_sclr;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	[2:0]	reconf_mode_sel_reg;
	wire	[2:0]	wire_reconf_mode_sel_reg_ena;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	[15:0]	reconfig_data_reg;
	wire	[15:0]	wire_reconfig_data_reg_ena;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	reconfig_done_reg;
	wire	wire_reconfig_done_reg_ena;
	reg	reset_reconf_addr_reg;
	wire	wire_reset_reconf_addr_reg_ena;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	[0:0]	state_mc_reg;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	wr_addr_inc_reg;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	wr_rd_pulse_reg;
	wire	wire_wr_rd_pulse_reg_ena;
	wire	wire_wr_rd_pulse_reg_sclr;
	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=LOW"} *)
	reg	wren_data_reg;
	wire	wire_wren_data_reg_clrn;
	wire	wire_wren_data_reg_ena;
	wire  [4:0]   wire_add_sub6_result;
	wire  wire_dprio_addr_offset_cmpr_aeb;
	wire  wire_is_rcxpat_chnl_en_ch_word_aeb;
	wire  wire_is_second_mif_header_address_aeb;
	wire  wire_is_special_address_aeb;
	wire  wire_is_table_33_idx_aeb;
	wire  wire_is_table_34_idx_aeb;
	wire  wire_is_table_35_cmp_aeb;
	wire  wire_is_table_37_cmp_aeb;
	wire  wire_is_table_38_cmp_aeb;
	wire  wire_is_table_42_cmp_aeb;
	wire  wire_is_table_43_cmp_aeb;
	wire  wire_is_table_44_cmp_aeb;
	wire  wire_is_table_46_cmp_aeb;
	wire  wire_is_table_47_cmp_aeb;
	wire  wire_is_table_75_idx_aeb;
	wire  wire_is_table_76_idx_aeb;
	wire  wire_is_table_77_idx_aeb;
	wire  wire_is_table_8_idx_ageb;
	wire  [3:0]   wire_addr_cntr_q;
	wire  [4:0]   wire_dprio_addr_offset_cnt_q;
	wire  [5:0]   wire_mif_addr_cntr_q;
	wire  [15:0]   wire_chl_addr_decode_eq;
	wire  [7:0]   wire_reconf_mode_dec_eq;
	wire  [5:0]   wire_central_pcs_first_word_mux_result;
	wire  [0:0]   wire_dprioout_mux_result;
	wire  [4:0]   wire_max_word_per_mif_type_result;
	wire  [15:0]  a2gr_dprio_addr;
	wire  [15:0]  a2gr_dprio_data;
	wire  a2gr_dprio_rden;
	wire  a2gr_dprio_wren;
	wire  a2gr_dprio_wren_data;
	wire  [4:0]  add_sub_datab;
	wire  add_sub_sel;
	wire  bonded_skip;
	wire  busy_state;
	wire  cal_busy;
	wire  [2:0]  cal_channel_address;
	wire  [2:0]  cal_channel_address_out;
	wire  [15:0]  cal_dprio_address;
	wire  [3:0]  cal_dprioout_wire;
	wire  [8:0]  cal_quad_address;
	wire  [15:0]  cal_testbuses;
	wire  [5:0]  central_pcs_first_word_addr;
	wire  [4:0]  central_pcs_max;
	wire  [4:0]  central_pcs_minus_one;
	wire  [1:0]  channel_address;
	wire  [1:0]  channel_address_out;
	wire  chl_addr_inc;
	wire  clr_offset;
	wire  delay_mif_head_out;
	wire  delay_second_mif_head_out;
	wire  [4:0]  dprio_addr_index;
	wire  [4:0]  dprio_addr_offset_cnt_out;
	wire  [4:0]  dprio_addr_translated_offset;
	wire  [15:0]  dprio_datain;
	wire  [15:0]  dprio_datain_64_67;
	wire  [15:0]  dprio_datain_68_6B;
	wire  [15:0]  dprio_datain_preemp1t;
	wire  [15:0]  dprio_datain_vodctrl;
	wire  dprio_pulse;
	wire  dprio_wr_done;
	wire  en_mif_addr_cntr;
	wire  en_write_trigger;
	wire  header_proc;
	wire  idle_state;
	wire  illegal_wr_mode_type;
	wire  is_ageb_table_7;
	wire  is_analog_control;
	wire  is_bonded_reconfig;
	wire  is_cent_clk_div;
	wire  is_central_pcs;
	wire  is_channel_reconfig;
	wire  is_end_mif;
	wire  is_illegal_reg_d;
	wire  is_illegal_reg_out;
	wire  is_mif_header;
	wire  is_mif_stage;
	wire  is_offset_end;
	wire  is_pma_mif_type;
	wire  is_protected_bit;
	wire  is_rcxpat_chnl_en_ch;
	wire  is_rx_mif_type;
	wire  is_rx_pcs;
	wire  is_rx_pma;
	wire  is_second_mif_header;
	wire  is_table_33;
	wire  is_table_34;
	wire  is_table_35;
	wire  is_table_37;
	wire  is_table_38;
	wire  is_table_42;
	wire  is_table_43;
	wire  is_table_44;
	wire  is_table_46;
	wire  is_table_47;
	wire  is_table_59;
	wire  is_table_61;
	wire  is_table_75;
	wire  is_table_76;
	wire  is_table_77;
	wire  is_tier_1;
	wire  is_tier_2;
	wire  is_tx_pcs;
	wire  is_tx_pma;
	wire  load_mif_header;
	wire  [15:0]  merged_dprioin;
	wire  mif_reconfig_done;
	wire  mif_rx_only;
	wire offset_cancellation_reset;
	wire  [8:0]  quad_address;
	wire  [8:0]  quad_address_out;
	wire  rd_pulse;
	wire read;
	wire  [15:0]  read_address;
	wire  [15:0]  read_reconfig_addr;
	wire  read_state;
	wire  reconf_done_reg_out;
	wire  [15:0]  reconfig_datain;
	wire  reconfig_reset_all;
	wire  reset_addr_done;
	wire  reset_reconf_addr;
	wire  reset_system;
	wire  [4:0]  rx_pcs_max;
	wire  [4:0]  rx_pma_max;
	wire  [4:0]  rx_pma_minus_one;
	wire  rx_reconfig;
	wire  s0_to_0;
	wire  s0_to_1;
	wire  s0_to_2;
	wire  s2_to_0;
	wire  [0:0]  state_mc_reg_in;
	wire  [15:0]  table_33_data;
	wire  [4:0]  table_34_addr;
	wire  [15:0]  table_35_data;
	wire  [15:0]  table_37_data;
	wire  [15:0]  table_38_data;
	wire  [15:0]  table_42_data;
	wire  [15:0]  table_43_data;
	wire  [15:0]  table_44_data;
	wire  [15:0]  table_46_data;
	wire  [15:0]  table_47_data;
	wire  [15:0]  table_75_data;
	wire  [15:0]  table_76_data;
	wire  [15:0]  table_77_data;
	wire  [4:0]  tx_pcs_max;
	wire  [4:0]  tx_pma_max;
	wire  tx_reconfig;
	wire  wr_pulse;
	wire  write_addr_inc;
	wire  [15:0]  write_address;
	wire  write_all_int;
	wire  write_done;
	wire  write_happened;
	wire  write_mif_word_done;
	wire  [15:0]  write_reconfig_addr;
	wire  write_skip;
	wire  write_state;
	wire  write_word_64_67_data_valid;
	wire  write_word_68_6B_data_valid;
	wire  write_word_done;
	wire  write_word_preemp1t_data_valid;
	wire  write_word_vodctrl_data_valid;

	alt_cal_c3gxb   calibration_c3gxb
	( 
	.busy(wire_calibration_c3gxb_busy),
	.cal_error(),
	.clock(reconfig_clk),
	.dprio_addr(wire_calibration_c3gxb_dprio_addr),
	.dprio_busy(wire_dprio_busy),
	.dprio_datain(wire_dprio_dataout),
	.dprio_dataout(wire_calibration_c3gxb_dprio_dataout),
	.dprio_rden(wire_calibration_c3gxb_dprio_rden),
	.dprio_wren(wire_calibration_c3gxb_dprio_wren),
	.quad_addr(wire_calibration_c3gxb_quad_addr),
	.remap_addr(address_pres_reg),
	.reset((offset_cancellation_reset | reconfig_reset_all)),
	.retain_addr(wire_calibration_c3gxb_retain_addr),
	.testbuses(cal_testbuses)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.start(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		calibration_c3gxb.channel_address_width = 4,
		calibration_c3gxb.number_of_channels = 16,
		calibration_c3gxb.sim_model_mode = "FALSE",
		calibration_c3gxb.lpm_type = "alt_cal_c3gxb";
	c4gxb_altpll_reconfig_alt_dprio_q9l   dprio
	( 
	.address((({16{wire_calibration_c3gxb_busy}} & cal_dprio_address) | ({16{(~ wire_calibration_c3gxb_busy)}} & a2gr_dprio_addr))),
	.busy(wire_dprio_busy),
	.datain((({16{wire_calibration_c3gxb_busy}} & wire_calibration_c3gxb_dprio_dataout) | ({16{(~ wire_calibration_c3gxb_busy)}} & a2gr_dprio_data))),
	.dataout(wire_dprio_dataout),
	.dpclk(reconfig_clk),
	.dpriodisable(wire_dprio_dpriodisable),
	.dprioin(wire_dprio_dprioin),
	.dprioload(wire_dprio_dprioload),
	.dprioout(wire_dprioout_mux_result),
	.quad_address(quad_address_out),
	.rden(((wire_calibration_c3gxb_busy & wire_calibration_c3gxb_dprio_rden) | ((~ wire_calibration_c3gxb_busy) & a2gr_dprio_rden))),
	.reset(reconfig_reset_all),
	.status_out(wire_dprio_status_out),
	.wren(((wire_calibration_c3gxb_busy & wire_calibration_c3gxb_dprio_wren) | ((~ wire_calibration_c3gxb_busy) & a2gr_dprio_wren))),
	.wren_data(((wire_calibration_c3gxb_busy & wire_calibration_c3gxb_retain_addr) | ((~ wire_calibration_c3gxb_busy) & a2gr_dprio_wren_data))));
	// synopsys translate_off
	initial
		address_pres_reg = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk or  posedge reconfig_reset_all)
		if (reconfig_reset_all == 1'b1) address_pres_reg <= 12'b0;
		else  address_pres_reg <= {(({9{cal_busy}} & cal_quad_address) | ({9{(~ cal_busy)}} & quad_address)), ((cal_busy & cal_channel_address[2]) | ((~ cal_busy) & is_central_pcs)), ((cal_busy & cal_channel_address[1]) | ((~ cal_busy) & (channel_address[1] | is_central_pcs))), ((cal_busy & cal_channel_address[0]) | ((~ cal_busy) & channel_address[0]))};
	// synopsys translate_off
	initial
		delay_mif_head = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk or  posedge reconfig_reset_all)
		if (reconfig_reset_all == 1'b1) delay_mif_head <= 1'b0;
		else if  (wire_delay_mif_head_ena == 1'b1)   delay_mif_head <= (is_mif_header & is_tier_1);
	assign
		wire_delay_mif_head_ena = ((((write_state & (~ reconf_done_reg_out)) & (~ write_mif_word_done)) & (~ reset_reconf_addr)) & (~ reset_system));
	// synopsys translate_off
	initial
		delay_second_mif_head = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk or  posedge reconfig_reset_all)
		if (reconfig_reset_all == 1'b1) delay_second_mif_head <= 1'b0;
		else if  (wire_delay_second_mif_head_ena == 1'b1)   delay_second_mif_head <= (is_second_mif_header & (~ write_done));
	assign
		wire_delay_second_mif_head_ena = ((((write_state & (~ write_mif_word_done)) & (~ reset_reconf_addr)) & (~ reset_system)) & is_tier_1);
	// synopsys translate_off
	initial
		dprio_dataout_reg = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk or  posedge reconfig_reset_all)
		if (reconfig_reset_all == 1'b1) dprio_dataout_reg <= 16'b0;
		else  dprio_dataout_reg <= wire_dprio_dataout;
	// synopsys translate_off
	initial
		dprio_pulse_reg = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk or  posedge reconfig_reset_all)
		if (reconfig_reset_all == 1'b1) dprio_pulse_reg <= 1'b0;
		else if  (wire_dprio_pulse_reg_ena == 1'b1)   dprio_pulse_reg <= wire_dprio_busy;
	assign
		wire_dprio_pulse_reg_ena = (read_state | write_state);
	// synopsys translate_off
	initial
		end_mif_reg = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk)
		if (is_tier_1 == 1'b1)   end_mif_reg <= mif_reconfig_done;
	// synopsys translate_off
	initial
		mif_stage = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk or  posedge reconfig_reset_all)
		if (reconfig_reset_all == 1'b1) mif_stage <= 1'b0;
		else if  (is_tier_1 == 1'b1) 
			if (wire_mif_stage_sclr == 1'b1) mif_stage <= 1'b0;
			else  mif_stage <= (((~ mif_stage) & (is_mif_header | mif_reconfig_done)) | ((~ ((is_mif_header | mif_reconfig_done) & dprio_pulse)) & mif_stage));
	assign
		wire_mif_stage_sclr = ((reset_system | is_illegal_reg_out) | mif_reconfig_done);
	// synopsys translate_off
	initial
		mif_type_reg[0:0] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk or  posedge reconfig_reset_all)
		if (reconfig_reset_all == 1'b1) mif_type_reg[0:0] <= 1'b0;
		else if  (wire_mif_type_reg_ena[0:0] == 1'b1) 
			if (wire_mif_type_reg_sclr[0:0] == 1'b1) mif_type_reg[0:0] <= 1'b0;
			else  mif_type_reg[0:0] <= wire_mif_type_reg_d[0:0];
	// synopsys translate_off
	initial
		mif_type_reg[1:1] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk or  posedge reconfig_reset_all)
		if (reconfig_reset_all == 1'b1) mif_type_reg[1:1] <= 1'b0;
		else if  (wire_mif_type_reg_ena[1:1] == 1'b1) 
			if (wire_mif_type_reg_sclr[1:1] == 1'b1) mif_type_reg[1:1] <= 1'b0;
			else  mif_type_reg[1:1] <= wire_mif_type_reg_d[1:1];
	// synopsys translate_off
	initial
		mif_type_reg[2:2] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk or  posedge reconfig_reset_all)
		if (reconfig_reset_all == 1'b1) mif_type_reg[2:2] <= 1'b0;
		else if  (wire_mif_type_reg_ena[2:2] == 1'b1) 
			if (wire_mif_type_reg_sclr[2:2] == 1'b1) mif_type_reg[2:2] <= 1'b0;
			else  mif_type_reg[2:2] <= wire_mif_type_reg_d[2:2];
	// synopsys translate_off
	initial
		mif_type_reg[3:3] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk or  posedge reconfig_reset_all)
		if (reconfig_reset_all == 1'b1) mif_type_reg[3:3] <= 1'b0;
		else if  (wire_mif_type_reg_ena[3:3] == 1'b1) 
			if (wire_mif_type_reg_sclr[3:3] == 1'b1) mif_type_reg[3:3] <= 1'b0;
			else  mif_type_reg[3:3] <= wire_mif_type_reg_d[3:3];
	assign
		wire_mif_type_reg_d = (((reconfig_data_reg[15:12] & {4{load_mif_header}}) & {4{(~ clr_offset)}}) | ({4{clr_offset}} & mif_type_reg));
	assign
		wire_mif_type_reg_ena = {4{(load_mif_header | clr_offset)}},
		wire_mif_type_reg_sclr = {(((~ load_mif_header) & clr_offset) & is_tx_pcs), (((~ load_mif_header) & clr_offset) & is_rx_pcs), (((~ load_mif_header) & clr_offset) & is_tx_pma), (((~ load_mif_header) & clr_offset) & is_rx_pma)};
	// synopsys translate_off
	initial
		reconf_mode_sel_reg[0:0] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk or  posedge reconfig_reset_all)
		if (reconfig_reset_all == 1'b1) reconf_mode_sel_reg[0:0] <= 1'b0;
		else if  (wire_reconf_mode_sel_reg_ena[0:0] == 1'b1)   reconf_mode_sel_reg[0:0] <= reconfig_mode_sel[0:0];
	// synopsys translate_off
	initial
		reconf_mode_sel_reg[1:1] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk or  posedge reconfig_reset_all)
		if (reconfig_reset_all == 1'b1) reconf_mode_sel_reg[1:1] <= 1'b0;
		else if  (wire_reconf_mode_sel_reg_ena[1:1] == 1'b1)   reconf_mode_sel_reg[1:1] <= reconfig_mode_sel[1:1];
	// synopsys translate_off
	initial
		reconf_mode_sel_reg[2:2] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk or  posedge reconfig_reset_all)
		if (reconfig_reset_all == 1'b1) reconf_mode_sel_reg[2:2] <= 1'b0;
		else if  (wire_reconf_mode_sel_reg_ena[2:2] == 1'b1)   reconf_mode_sel_reg[2:2] <= reconfig_mode_sel[2:2];
	assign
		wire_reconf_mode_sel_reg_ena = {3{(idle_state & (~ mif_stage))}};
	// synopsys translate_off
	initial
		reconfig_data_reg[0:0] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk or  posedge reconfig_reset_all)
		if (reconfig_reset_all == 1'b1) reconfig_data_reg[0:0] <= 1'b0;
		else if  (wire_reconfig_data_reg_ena[0:0] == 1'b1)   reconfig_data_reg[0:0] <= reconfig_data[0:0];
	// synopsys translate_off
	initial
		reconfig_data_reg[1:1] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk or  posedge reconfig_reset_all)
		if (reconfig_reset_all == 1'b1) reconfig_data_reg[1:1] <= 1'b0;
		else if  (wire_reconfig_data_reg_ena[1:1] == 1'b1)   reconfig_data_reg[1:1] <= reconfig_data[1:1];
	// synopsys translate_off
	initial
		reconfig_data_reg[2:2] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk or  posedge reconfig_reset_all)
		if (reconfig_reset_all == 1'b1) reconfig_data_reg[2:2] <= 1'b0;
		else if  (wire_reconfig_data_reg_ena[2:2] == 1'b1)   reconfig_data_reg[2:2] <= reconfig_data[2:2];
	// synopsys translate_off
	initial
		reconfig_data_reg[3:3] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk or  posedge reconfig_reset_all)
		if (reconfig_reset_all == 1'b1) reconfig_data_reg[3:3] <= 1'b0;
		else if  (wire_reconfig_data_reg_ena[3:3] == 1'b1)   reconfig_data_reg[3:3] <= reconfig_data[3:3];
	// synopsys translate_off
	initial
		reconfig_data_reg[4:4] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk or  posedge reconfig_reset_all)
		if (reconfig_reset_all == 1'b1) reconfig_data_reg[4:4] <= 1'b0;
		else if  (wire_reconfig_data_reg_ena[4:4] == 1'b1)   reconfig_data_reg[4:4] <= reconfig_data[4:4];
	// synopsys translate_off
	initial
		reconfig_data_reg[5:5] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk or  posedge reconfig_reset_all)
		if (reconfig_reset_all == 1'b1) reconfig_data_reg[5:5] <= 1'b0;
		else if  (wire_reconfig_data_reg_ena[5:5] == 1'b1)   reconfig_data_reg[5:5] <= reconfig_data[5:5];
	// synopsys translate_off
	initial
		reconfig_data_reg[6:6] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk or  posedge reconfig_reset_all)
		if (reconfig_reset_all == 1'b1) reconfig_data_reg[6:6] <= 1'b0;
		else if  (wire_reconfig_data_reg_ena[6:6] == 1'b1)   reconfig_data_reg[6:6] <= reconfig_data[6:6];
	// synopsys translate_off
	initial
		reconfig_data_reg[7:7] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk or  posedge reconfig_reset_all)
		if (reconfig_reset_all == 1'b1) reconfig_data_reg[7:7] <= 1'b0;
		else if  (wire_reconfig_data_reg_ena[7:7] == 1'b1)   reconfig_data_reg[7:7] <= reconfig_data[7:7];
	// synopsys translate_off
	initial
		reconfig_data_reg[8:8] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk or  posedge reconfig_reset_all)
		if (reconfig_reset_all == 1'b1) reconfig_data_reg[8:8] <= 1'b0;
		else if  (wire_reconfig_data_reg_ena[8:8] == 1'b1)   reconfig_data_reg[8:8] <= reconfig_data[8:8];
	// synopsys translate_off
	initial
		reconfig_data_reg[9:9] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk or  posedge reconfig_reset_all)
		if (reconfig_reset_all == 1'b1) reconfig_data_reg[9:9] <= 1'b0;
		else if  (wire_reconfig_data_reg_ena[9:9] == 1'b1)   reconfig_data_reg[9:9] <= reconfig_data[9:9];
	// synopsys translate_off
	initial
		reconfig_data_reg[10:10] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk or  posedge reconfig_reset_all)
		if (reconfig_reset_all == 1'b1) reconfig_data_reg[10:10] <= 1'b0;
		else if  (wire_reconfig_data_reg_ena[10:10] == 1'b1)   reconfig_data_reg[10:10] <= reconfig_data[10:10];
	// synopsys translate_off
	initial
		reconfig_data_reg[11:11] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk or  posedge reconfig_reset_all)
		if (reconfig_reset_all == 1'b1) reconfig_data_reg[11:11] <= 1'b0;
		else if  (wire_reconfig_data_reg_ena[11:11] == 1'b1)   reconfig_data_reg[11:11] <= reconfig_data[11:11];
	// synopsys translate_off
	initial
		reconfig_data_reg[12:12] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk or  posedge reconfig_reset_all)
		if (reconfig_reset_all == 1'b1) reconfig_data_reg[12:12] <= 1'b0;
		else if  (wire_reconfig_data_reg_ena[12:12] == 1'b1)   reconfig_data_reg[12:12] <= reconfig_data[12:12];
	// synopsys translate_off
	initial
		reconfig_data_reg[13:13] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk or  posedge reconfig_reset_all)
		if (reconfig_reset_all == 1'b1) reconfig_data_reg[13:13] <= 1'b0;
		else if  (wire_reconfig_data_reg_ena[13:13] == 1'b1)   reconfig_data_reg[13:13] <= reconfig_data[13:13];
	// synopsys translate_off
	initial
		reconfig_data_reg[14:14] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk or  posedge reconfig_reset_all)
		if (reconfig_reset_all == 1'b1) reconfig_data_reg[14:14] <= 1'b0;
		else if  (wire_reconfig_data_reg_ena[14:14] == 1'b1)   reconfig_data_reg[14:14] <= reconfig_data[14:14];
	// synopsys translate_off
	initial
		reconfig_data_reg[15:15] = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk or  posedge reconfig_reset_all)
		if (reconfig_reset_all == 1'b1) reconfig_data_reg[15:15] <= 1'b0;
		else if  (wire_reconfig_data_reg_ena[15:15] == 1'b1)   reconfig_data_reg[15:15] <= reconfig_data[15:15];
	assign
		wire_reconfig_data_reg_ena = {16{(idle_state & write_all)}};
	// synopsys translate_off
	initial
		reconfig_done_reg = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk or  posedge reconfig_reset_all)
		if (reconfig_reset_all == 1'b1) reconfig_done_reg <= 1'b0;
		else if  (wire_reconfig_done_reg_ena == 1'b1) 
			if (reset_system == 1'b1) reconfig_done_reg <= 1'b0;
			else  reconfig_done_reg <= (((mif_reconfig_done & is_tier_1) & (~ reconfig_done_reg)) | (reconfig_done_reg & ((is_mif_header & (~ write_state)) & is_tier_1)));
	assign
		wire_reconfig_done_reg_ena = (is_mif_stage | (idle_state & (~ is_mif_stage)));
	// synopsys translate_off
	initial
		reset_reconf_addr_reg = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk or  posedge reconfig_reset_all)
		if (reconfig_reset_all == 1'b1) reset_reconf_addr_reg <= 1'b0;
		else if  (wire_reset_reconf_addr_reg_ena == 1'b1)   reset_reconf_addr_reg <= (((~ reset_reconf_addr_reg) & reset_reconfig_address) | (reset_reconf_addr_reg & (~ reset_addr_done)));
	assign
		wire_reset_reconf_addr_reg_ena = (idle_state & is_tier_1);
	// synopsys translate_off
	initial
		state_mc_reg = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk or  posedge reconfig_reset_all)
		if (reconfig_reset_all == 1'b1) state_mc_reg <= 1'b0;
		else  state_mc_reg <= state_mc_reg_in;
	// synopsys translate_off
	initial
		wr_addr_inc_reg = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk or  posedge reconfig_reset_all)
		if (reconfig_reset_all == 1'b1) wr_addr_inc_reg <= 1'b0;
		else  wr_addr_inc_reg <= (wr_pulse | (((~ wr_pulse) & (~ rd_pulse)) & wr_addr_inc_reg));
	// synopsys translate_off
	initial
		wr_rd_pulse_reg = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk or  posedge reconfig_reset_all)
		if (reconfig_reset_all == 1'b1) wr_rd_pulse_reg <= 1'b0;
		else if  (wire_wr_rd_pulse_reg_ena == 1'b1) 
			if (wire_wr_rd_pulse_reg_sclr == 1'b1) wr_rd_pulse_reg <= 1'b0;
			else  wr_rd_pulse_reg <= (~ wr_rd_pulse_reg);
	assign
		wire_wr_rd_pulse_reg_ena = ((((((~ dprio_pulse) & (delay_mif_head_out | (delay_second_mif_head_out & (((write_skip | bonded_skip) | is_protected_bit) | is_cent_clk_div)))) | ((dprio_pulse & ((~ is_tier_1) | (is_tier_1 & (((((is_rcxpat_chnl_en_ch | write_skip) | is_mif_header) | bonded_skip) | is_protected_bit) | is_cent_clk_div)))) & (~ read_state))) | (is_tier_1 & mif_reconfig_done)) | reset_addr_done) | is_illegal_reg_out),
		wire_wr_rd_pulse_reg_sclr = (((reset_system | (is_tier_1 & mif_reconfig_done)) | reset_addr_done) | is_illegal_reg_out);
	// synopsys translate_off
	initial
		wren_data_reg = 0;
	// synopsys translate_on
	always @ ( posedge reconfig_clk or  negedge wire_wren_data_reg_clrn)
		if (wire_wren_data_reg_clrn == 1'b0) wren_data_reg <= 1'b0;
		else if  (wire_wren_data_reg_ena == 1'b1)   wren_data_reg <= rd_pulse;
	assign
		wire_wren_data_reg_ena = (rd_pulse & is_tier_1),
		wire_wren_data_reg_clrn = (~ (write_done | reconfig_reset_all));
	lpm_add_sub   add_sub6
	( 
	.add_sub(add_sub_sel),
	.cout(),
	.dataa(wire_dprio_addr_offset_cnt_q),
	.datab(add_sub_datab),
	.overflow(),
	.result(wire_add_sub6_result)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.cin(),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		add_sub6.lpm_representation = "UNSIGNED",
		add_sub6.lpm_width = 5,
		add_sub6.lpm_type = "lpm_add_sub";
	lpm_compare   dprio_addr_offset_cmpr
	( 
	.aeb(wire_dprio_addr_offset_cmpr_aeb),
	.agb(),
	.ageb(),
	.alb(),
	.aleb(),
	.aneb(),
	.dataa(wire_dprio_addr_offset_cnt_q),
	.datab((({5{(~ is_central_pcs)}} & wire_max_word_per_mif_type_result) | ({5{is_central_pcs}} & central_pcs_max)))
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		dprio_addr_offset_cmpr.lpm_width = 5,
		dprio_addr_offset_cmpr.lpm_type = "lpm_compare";
	lpm_compare   is_rcxpat_chnl_en_ch_word
	( 
	.aeb(wire_is_rcxpat_chnl_en_ch_word_aeb),
	.agb(),
	.ageb(),
	.alb(),
	.aleb(),
	.aneb(),
	.dataa(dprio_addr_offset_cnt_out),
	.datab(5'b00001)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		is_rcxpat_chnl_en_ch_word.lpm_width = 5,
		is_rcxpat_chnl_en_ch_word.lpm_type = "lpm_compare";
	lpm_compare   is_second_mif_header_address
	( 
	.aeb(wire_is_second_mif_header_address_aeb),
	.agb(),
	.ageb(),
	.alb(),
	.aleb(),
	.aneb(),
	.dataa(wire_mif_addr_cntr_q),
	.datab(6'b000001)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		is_second_mif_header_address.lpm_width = 6,
		is_second_mif_header_address.lpm_type = "lpm_compare";
	lpm_compare   is_special_address
	( 
	.aeb(wire_is_special_address_aeb),
	.agb(),
	.ageb(),
	.alb(),
	.aleb(),
	.aneb(),
	.dataa(wire_mif_addr_cntr_q),
	.datab({6{1'b0}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		is_special_address.lpm_width = 6,
		is_special_address.lpm_type = "lpm_compare";
	lpm_compare   is_table_33_idx
	( 
	.aeb(wire_is_table_33_idx_aeb),
	.agb(),
	.ageb(),
	.alb(),
	.aleb(),
	.aneb(),
	.dataa(dprio_addr_offset_cnt_out),
	.datab(5'b00101)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		is_table_33_idx.lpm_width = 5,
		is_table_33_idx.lpm_type = "lpm_compare";
	lpm_compare   is_table_34_idx
	( 
	.aeb(wire_is_table_34_idx_aeb),
	.agb(),
	.ageb(),
	.alb(),
	.aleb(),
	.aneb(),
	.dataa(dprio_addr_offset_cnt_out),
	.datab({5{1'b0}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		is_table_34_idx.lpm_width = 5,
		is_table_34_idx.lpm_type = "lpm_compare";
	lpm_compare   is_table_35_cmp
	( 
	.aeb(wire_is_table_35_cmp_aeb),
	.agb(),
	.ageb(),
	.alb(),
	.aleb(),
	.aneb(),
	.dataa(dprio_addr_offset_cnt_out),
	.datab(5'b00110)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		is_table_35_cmp.lpm_width = 5,
		is_table_35_cmp.lpm_type = "lpm_compare";
	lpm_compare   is_table_37_cmp
	( 
	.aeb(wire_is_table_37_cmp_aeb),
	.agb(),
	.ageb(),
	.alb(),
	.aleb(),
	.aneb(),
	.dataa(dprio_addr_offset_cnt_out),
	.datab(5'b00010)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		is_table_37_cmp.lpm_width = 5,
		is_table_37_cmp.lpm_type = "lpm_compare";
	lpm_compare   is_table_38_cmp
	( 
	.aeb(wire_is_table_38_cmp_aeb),
	.agb(),
	.ageb(),
	.alb(),
	.aleb(),
	.aneb(),
	.dataa(dprio_addr_offset_cnt_out),
	.datab(5'b00011)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		is_table_38_cmp.lpm_width = 5,
		is_table_38_cmp.lpm_type = "lpm_compare";
	lpm_compare   is_table_42_cmp
	( 
	.aeb(wire_is_table_42_cmp_aeb),
	.agb(),
	.ageb(),
	.alb(),
	.aleb(),
	.aneb(),
	.dataa(dprio_addr_offset_cnt_out),
	.datab(5'b00111)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		is_table_42_cmp.lpm_width = 5,
		is_table_42_cmp.lpm_type = "lpm_compare";
	lpm_compare   is_table_43_cmp
	( 
	.aeb(wire_is_table_43_cmp_aeb),
	.agb(),
	.ageb(),
	.alb(),
	.aleb(),
	.aneb(),
	.dataa(dprio_addr_offset_cnt_out),
	.datab(5'b01000)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		is_table_43_cmp.lpm_width = 5,
		is_table_43_cmp.lpm_type = "lpm_compare";
	lpm_compare   is_table_44_cmp
	( 
	.aeb(wire_is_table_44_cmp_aeb),
	.agb(),
	.ageb(),
	.alb(),
	.aleb(),
	.aneb(),
	.dataa(dprio_addr_offset_cnt_out),
	.datab(5'b01001)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		is_table_44_cmp.lpm_width = 5,
		is_table_44_cmp.lpm_type = "lpm_compare";
	lpm_compare   is_table_46_cmp
	( 
	.aeb(wire_is_table_46_cmp_aeb),
	.agb(),
	.ageb(),
	.alb(),
	.aleb(),
	.aneb(),
	.dataa(dprio_addr_offset_cnt_out),
	.datab(5'b01011)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		is_table_46_cmp.lpm_width = 5,
		is_table_46_cmp.lpm_type = "lpm_compare";
	lpm_compare   is_table_47_cmp
	( 
	.aeb(wire_is_table_47_cmp_aeb),
	.agb(),
	.ageb(),
	.alb(),
	.aleb(),
	.aneb(),
	.dataa(dprio_addr_offset_cnt_out),
	.datab(5'b01100)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		is_table_47_cmp.lpm_width = 5,
		is_table_47_cmp.lpm_type = "lpm_compare";
	lpm_compare   is_table_75_idx
	( 
	.aeb(wire_is_table_75_idx_aeb),
	.agb(),
	.ageb(),
	.alb(),
	.aleb(),
	.aneb(),
	.dataa(dprio_addr_offset_cnt_out),
	.datab(5'b00001)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		is_table_75_idx.lpm_width = 5,
		is_table_75_idx.lpm_type = "lpm_compare";
	lpm_compare   is_table_76_idx
	( 
	.aeb(wire_is_table_76_idx_aeb),
	.agb(),
	.ageb(),
	.alb(),
	.aleb(),
	.aneb(),
	.dataa(dprio_addr_offset_cnt_out),
	.datab(5'b00010)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		is_table_76_idx.lpm_width = 5,
		is_table_76_idx.lpm_type = "lpm_compare";
	lpm_compare   is_table_77_idx
	( 
	.aeb(wire_is_table_77_idx_aeb),
	.agb(),
	.ageb(),
	.alb(),
	.aleb(),
	.aneb(),
	.dataa(dprio_addr_offset_cnt_out),
	.datab(5'b00011)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		is_table_77_idx.lpm_width = 5,
		is_table_77_idx.lpm_type = "lpm_compare";
	lpm_compare   is_table_8_idx
	( 
	.aeb(),
	.agb(),
	.ageb(wire_is_table_8_idx_ageb),
	.alb(),
	.aleb(),
	.aneb(),
	.dataa(dprio_addr_offset_cnt_out),
	.datab(5'b00010)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		is_table_8_idx.lpm_width = 5,
		is_table_8_idx.lpm_type = "lpm_compare";
	lpm_counter   addr_cntr
	( 
	.clock(reconfig_clk),
	.cnt_en((chl_addr_inc & is_analog_control)),
	.cout(),
	.data(logical_channel_address),
	.eq(),
	.q(wire_addr_cntr_q),
	.sclr(((write_done & (reconf_done_reg_out | (~ (is_tier_1 | is_analog_control)))) | reconfig_reset_all)),
	.sload(((idle_state & (write_all | read)) & ((reconfig_mode_sel[2] | reconfig_mode_sel[1]) | reconfig_mode_sel[0])))
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.aload(1'b0),
	.aset(1'b0),
	.cin(1'b1),
	.clk_en(1'b1),
	.sset(1'b0),
	.updown(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		addr_cntr.lpm_modulus = 16,
		addr_cntr.lpm_port_updown = "PORT_UNUSED",
		addr_cntr.lpm_width = 4,
		addr_cntr.lpm_type = "lpm_counter";
	lpm_counter   dprio_addr_offset_cnt
	( 
	.clock(reconfig_clk),
	.cnt_en(en_mif_addr_cntr),
	.cout(),
	.data({5{1'b0}}),
	.eq(),
	.q(wire_dprio_addr_offset_cnt_q),
	.sclr(((((clr_offset | is_mif_header) | reset_addr_done) | is_illegal_reg_out) | mif_reconfig_done))
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.aload(1'b0),
	.aset(1'b0),
	.cin(1'b1),
	.clk_en(1'b1),
	.sload(1'b0),
	.sset(1'b0),
	.updown(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		dprio_addr_offset_cnt.lpm_port_updown = "PORT_UNUSED",
		dprio_addr_offset_cnt.lpm_width = 5,
		dprio_addr_offset_cnt.lpm_type = "lpm_counter";
	lpm_counter   mif_addr_cntr
	( 
	.clock(reconfig_clk),
	.cnt_en(((en_mif_addr_cntr | ((((((is_mif_header & write_state) | (is_second_mif_header & write_state)) & (~ write_done)) & (~ mif_reconfig_done)) & (~ reconf_done_reg_out)) & (~ dprio_pulse))) & is_tier_1)),
	.cout(),
	.data(({6{is_central_pcs}} & central_pcs_first_word_addr)),
	.eq(),
	.q(wire_mif_addr_cntr_q),
	.sclr((((((reset_reconf_addr | is_end_mif) & (~ ((is_mif_header | is_second_mif_header) & write_state))) | ((wire_dprio_status_out[1] | wire_dprio_status_out[3]) & reset_system)) | is_illegal_reg_out) | reconfig_reset_all)),
	.sload((((is_second_mif_header & (~ write_done)) & write_state) & is_central_pcs))
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.aload(1'b0),
	.aset(1'b0),
	.cin(1'b1),
	.clk_en(1'b1),
	.sset(1'b0),
	.updown(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		mif_addr_cntr.lpm_modulus = 50,
		mif_addr_cntr.lpm_port_updown = "PORT_UNUSED",
		mif_addr_cntr.lpm_width = 6,
		mif_addr_cntr.lpm_type = "lpm_counter";
	lpm_decode   chl_addr_decode
	( 
	.data(wire_addr_cntr_q),
	.eq(wire_chl_addr_decode_eq)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0),
	.enable(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		chl_addr_decode.lpm_decodes = 16,
		chl_addr_decode.lpm_width = 4,
		chl_addr_decode.lpm_type = "lpm_decode";
	lpm_decode   reconf_mode_dec
	( 
	.data(reconf_mode_sel_reg),
	.enable(((~ idle_state) | mif_stage)),
	.eq(wire_reconf_mode_dec_eq)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		reconf_mode_dec.lpm_decodes = 8,
		reconf_mode_dec.lpm_width = 3,
		reconf_mode_dec.lpm_type = "lpm_decode";
	c4gxb_altpll_reconfig_mux_cda   central_pcs_first_word_mux
	( 
	.data({6'b100101, 6'b001111, 6'b110000, 6'b001101, 6'b010110, 6'b001001}),
	.result(wire_central_pcs_first_word_mux_result),
	.sel({mif_rx_only, mif_type_reg[3], (((~ mif_rx_only) & mif_type_reg[1]) | (mif_rx_only & mif_type_reg[3]))}));
	c4gxb_altpll_reconfig_mux_4da   dprioout_mux
	( 
	.data(cal_dprioout_wire),
	.result(wire_dprioout_mux_result),
	.sel((({2{cal_busy}} & cal_quad_address[1:0]) | ({2{(~ cal_busy)}} & quad_address[1:0]))));
	c4gxb_altpll_reconfig_mux_8da   max_word_per_mif_type
	( 
	.data({rx_pma_max, tx_pma_max, rx_pcs_max, tx_pcs_max}),
	.result(wire_max_word_per_mif_type_result),
	.sel({is_pma_mif_type, is_rx_mif_type}));
	assign
		a2gr_dprio_addr = ((((write_address & {16{is_analog_control}}) | ((write_reconfig_addr & {16{(~ is_analog_control)}}) & {16{(~ header_proc)}})) & {16{write_state}}) | (((read_address & {16{is_analog_control}}) | ({16{(~ is_analog_control)}} & read_reconfig_addr)) & {16{read_state}})),
		a2gr_dprio_data = ((dprio_datain & {16{(~ header_proc)}}) & {16{write_state}}),
		a2gr_dprio_rden = rd_pulse,
		a2gr_dprio_wren = ((wr_pulse & (~ wren_data_reg)) & (~ is_analog_control)),
		a2gr_dprio_wren_data = (wr_pulse & (wren_data_reg | is_analog_control)),
		add_sub_datab = (({5{((is_rx_pma | is_rx_pcs) | is_ageb_table_7)}} & rx_pma_minus_one) | ({5{is_central_pcs}} & central_pcs_minus_one)),
		add_sub_sel = ((~ ((is_rx_pma | is_central_pcs) | is_rx_pcs)) | is_ageb_table_7),
		bonded_skip = (((((((is_table_33 | is_table_35) & is_bonded_reconfig) | is_table_59) | is_table_61) | is_table_75) | is_table_76) | is_table_77),
		busy = (busy_state | cal_busy),
		busy_state = (read_state | write_state),
		cal_busy = wire_calibration_c3gxb_busy,
		cal_channel_address = wire_calibration_c3gxb_dprio_addr[14:12],
		cal_channel_address_out = address_pres_reg[2:0],
		cal_dprio_address = {wire_calibration_c3gxb_dprio_addr[15], cal_channel_address_out, wire_calibration_c3gxb_dprio_addr[11:0]},
		cal_dprioout_wire = {reconfig_fromgxb[15], reconfig_fromgxb[10], reconfig_fromgxb[5], reconfig_fromgxb[0]},
		cal_quad_address = wire_calibration_c3gxb_quad_addr,
		cal_testbuses = {reconfig_fromgxb[19:16], reconfig_fromgxb[14:11], reconfig_fromgxb[9:6], reconfig_fromgxb[4:1]},
		central_pcs_first_word_addr = wire_central_pcs_first_word_mux_result,
		central_pcs_max = 5'b00100,
		central_pcs_minus_one = 5'b00001,
		channel_address = wire_addr_cntr_q[1:0],
		channel_address_out = (address_pres_reg[1:0] & {2{(~ ((address_pres_reg[2] & address_pres_reg[1]) & address_pres_reg[0]))}}),
		channel_reconfig_done = reconf_done_reg_out,
		chl_addr_inc = ((read_state & dprio_pulse) | ((write_state & dprio_pulse) & write_happened)),
		clr_offset = (is_offset_end & en_mif_addr_cntr),
		delay_mif_head_out = delay_mif_head,
		delay_second_mif_head_out = delay_second_mif_head,
		dprio_addr_index = (({5{(~ ((is_rx_pma | is_central_pcs) | is_ageb_table_7))}} & wire_dprio_addr_offset_cnt_q) | ({5{((is_rx_pma | is_central_pcs) | is_ageb_table_7)}} & dprio_addr_translated_offset)),
		dprio_addr_offset_cnt_out = wire_dprio_addr_offset_cnt_q,
		dprio_addr_translated_offset = (((wire_add_sub6_result & {5{((is_rx_pma | is_central_pcs) | is_ageb_table_7)}}) & {5{(~ is_table_34)}}) | ({5{is_table_34}} & table_34_addr)),
		dprio_datain = ((((((dprio_datain_vodctrl & {16{write_word_vodctrl_data_valid}}) | (dprio_datain_preemp1t & {16{write_word_preemp1t_data_valid}})) | (dprio_datain_64_67 & {16{write_word_64_67_data_valid}})) | (dprio_datain_68_6B & {16{write_word_68_6B_data_valid}})) & {16{is_analog_control}}) | ({16{(is_tier_1 | is_tier_2)}} & reconfig_datain)),
		dprio_datain_64_67 = {16{1'b0}},
		dprio_datain_68_6B = {16{1'b0}},
		dprio_datain_preemp1t = {16{1'b0}},
		dprio_datain_vodctrl = {16{1'b0}},
		dprio_pulse = ((dprio_pulse_reg ^ wire_dprio_busy) & (~ wire_dprio_busy)),
		dprio_wr_done = wire_dprio_status_out[1],
		en_mif_addr_cntr = ((read_state & dprio_wr_done) | ((write_state & dprio_wr_done) & write_happened)),
		en_write_trigger = ((illegal_wr_mode_type & (~ tx_reconfig)) | rx_reconfig),
		header_proc = ((((delay_mif_head | is_mif_header) | delay_second_mif_head_out) | is_second_mif_header) & is_tier_1),
		idle_state = (~ state_mc_reg),
		illegal_wr_mode_type = (((~ reconfig_mode_sel[2]) & reconfig_mode_sel[0]) & (~ reconfig_mode_sel[1])),
		is_ageb_table_7 = ((wire_is_table_8_idx_ageb & is_tier_1) & is_rx_pcs),
		is_analog_control = wire_reconf_mode_dec_eq[0],
		is_bonded_reconfig = 1'b0,
		is_central_pcs = wire_reconf_mode_dec_eq[7],
		is_channel_reconfig = wire_reconf_mode_dec_eq[1],
		is_end_mif = end_mif_reg,
		is_illegal_reg_d = 1'b0,
		is_illegal_reg_out = 1'b0,
		is_mif_header = wire_is_special_address_aeb,
		is_mif_stage = mif_stage,
		is_offset_end = wire_dprio_addr_offset_cmpr_aeb,
		is_pma_mif_type = (is_tx_pma | is_rx_pma),
		is_protected_bit = ((((((is_table_37 | is_table_38) | is_table_42) | is_table_43) | is_table_44) | is_table_46) | is_table_47),
		is_rcxpat_chnl_en_ch = ((wire_is_rcxpat_chnl_en_ch_word_aeb & is_tier_1) & is_tx_pcs),
		is_rx_mif_type = (is_rx_pcs | is_rx_pma),
		is_rx_pcs = ((mif_type_reg[2] & (~ is_tx_pcs)) & (is_channel_reconfig & (~ is_central_pcs))),
		is_rx_pma = ((((mif_type_reg[0] & (~ is_tx_pcs)) & (~ is_rx_pcs)) & (~ is_tx_pma)) & (is_channel_reconfig & (~ is_central_pcs))),
		is_second_mif_header = wire_is_second_mif_header_address_aeb,
		is_table_33 = ((wire_is_table_33_idx_aeb & is_tier_1) & is_tx_pma),
		is_table_34 = ((wire_is_table_34_idx_aeb & is_tier_1) & is_rx_pma),
		is_table_35 = (wire_is_table_35_cmp_aeb & is_tx_pma),
		is_table_37 = ((wire_is_table_37_cmp_aeb & is_tier_1) & is_rx_pma),
		is_table_38 = ((wire_is_table_38_cmp_aeb & is_tier_1) & is_rx_pma),
		is_table_42 = ((wire_is_table_42_cmp_aeb & is_tier_1) & is_rx_pma),
		is_table_43 = ((wire_is_table_43_cmp_aeb & is_tier_1) & is_rx_pma),
		is_table_44 = ((wire_is_table_44_cmp_aeb & is_tier_1) & is_rx_pma),
		is_table_46 = ((wire_is_table_46_cmp_aeb & is_tier_1) & is_rx_pma),
		is_table_47 = ((wire_is_table_47_cmp_aeb & is_tier_1) & is_rx_pma),
		is_table_59 = 1'b0,
		is_table_61 = 1'b0,
		is_table_75 = ((wire_is_table_75_idx_aeb & is_tier_1) & is_central_pcs),
		is_table_76 = ((wire_is_table_76_idx_aeb & is_tier_1) & is_central_pcs),
		is_table_77 = ((wire_is_table_77_idx_aeb & is_tier_1) & is_central_pcs),
		is_tier_1 = (wire_reconf_mode_dec_eq[1] | wire_reconf_mode_dec_eq[7]),
		is_tier_2 = wire_reconf_mode_dec_eq[2],
		is_tx_pcs = (mif_type_reg[3] & (is_channel_reconfig & (~ is_central_pcs))),
		is_tx_pma = (((mif_type_reg[1] & (~ is_tx_pcs)) & (~ is_rx_pcs)) & (is_channel_reconfig & (~ is_central_pcs))),
		load_mif_header = ((is_mif_header & (~ write_mif_word_done)) & is_tier_1),
		merged_dprioin = {reconfig_data_reg[15:12], (({9{(~ write_skip)}} & reconfig_data_reg[11:3]) | ({9{write_skip}} & dprio_dataout_reg[11:3])), ((({2{(is_rcxpat_chnl_en_ch & (~ write_skip))}} & dprio_dataout_reg[2:1]) | ({2{((~ is_rcxpat_chnl_en_ch) & (~ write_skip))}} & reconfig_data_reg[2:1])) | ({2{write_skip}} & dprio_dataout_reg[2:1])), (((~ write_skip) & reconfig_data_reg[0]) | (write_skip & dprio_dataout_reg[0]))},
		mif_reconfig_done = ((((~ ((((mif_type_reg[3] | mif_type_reg[2]) | mif_type_reg[1]) | mif_type_reg[0]) & is_channel_reconfig)) & write_done) & (~ is_central_pcs)) | ((is_central_pcs & is_offset_end) & dprio_pulse)),
		mif_rx_only = ((~ mif_type_reg[1]) & (~ mif_type_reg[3])),
		offset_cancellation_reset = 1'b0,
		quad_address = {{7{1'b0}}, wire_addr_cntr_q[3:2]},
		quad_address_out = address_pres_reg[11:3],
		rd_pulse = (((((~ dprio_pulse) & (~ write_done)) & (~ wr_rd_pulse_reg)) & (~ is_illegal_reg_d)) & (write_state & (((~ header_proc) & (~ reset_reconf_addr)) & ((~ is_tier_1) | (is_tier_1 & (((is_rcxpat_chnl_en_ch | write_skip) | bonded_skip) | is_protected_bit)))))),
		read = 1'b0,
		read_address = {16{1'b0}},
		read_reconfig_addr = {16{1'b0}},
		read_state = 1'b0,
		reconf_done_reg_out = reconfig_done_reg,
		reconfig_address_en = (write_done | idle_state),
		reconfig_address_out = ((wire_mif_addr_cntr_q & {6{((~ mif_reconfig_done) & (~ is_end_mif))}}) & {6{is_tier_1}}),
		reconfig_datain = ((((((((((((({16{is_table_33}} & table_33_data) | ({16{is_table_35}} & table_35_data)) | ({16{is_table_75}} & table_75_data)) | ({16{is_table_76}} & table_76_data)) | ({16{is_table_77}} & table_77_data)) | ({16{is_table_37}} & table_37_data)) | ({16{is_table_38}} & table_38_data)) | ({16{is_table_42}} & table_42_data)) | ({16{is_table_43}} & table_43_data)) | ({16{is_table_44}} & table_44_data)) | ({16{is_table_46}} & table_46_data)) | ({16{is_table_47}} & table_47_data)) | (merged_dprioin & {16{(~ (((((((((((is_table_33 | is_table_35) | is_table_75) | is_table_76) | is_table_77) | is_table_37) | is_table_38) | is_table_42) | is_table_43) | is_table_44) | is_table_46) | is_table_47))}})),
		reconfig_reset_all = 1'b0,
		reconfig_togxb = {wire_calibration_c3gxb_busy, wire_dprio_dprioload, wire_dprio_dpriodisable, wire_dprio_dprioin},
		reset_addr_done = ((is_mif_header & reset_reconf_addr) | reconfig_reset_all),
		reset_reconf_addr = reset_reconf_addr_reg,
		reset_system = 1'b0,
		rx_pcs_max = 5'b10101,
		rx_pma_max = 5'b01100,
		rx_pma_minus_one = 5'b00001,
		rx_reconfig = 1'b1,
		s0_to_0 = write_done,
		s0_to_1 = (write_all_int & idle_state),
		s0_to_2 = 1'b0,
		s2_to_0 = 1'b0,
		state_mc_reg_in = ((s0_to_2 | s0_to_1) | ((((~ s2_to_0) & (~ s0_to_1)) & (~ s0_to_0)) & state_mc_reg[0])),
		table_33_data = {reconfig_data_reg[15:0]},
		table_34_addr = 5'b00110,
		table_35_data = {reconfig_data_reg[15:0]},
		table_37_data = {(({4{(~ write_skip)}} & reconfig_data_reg[15:12]) | ({4{write_skip}} & dprio_dataout_reg[15:12])), dprio_dataout_reg[11:3], (({3{(~ write_skip)}} & reconfig_data_reg[2:0]) | ({3{write_skip}} & dprio_dataout_reg[2:0]))},
		table_38_data = {(({9{(~ write_skip)}} & reconfig_data_reg[15:7]) | ({9{write_skip}} & dprio_dataout_reg[15:7])), dprio_dataout_reg[6:5], (({5{(~ write_skip)}} & reconfig_data_reg[4:0]) | ({5{write_skip}} & dprio_dataout_reg[4:0]))},
		table_42_data = {reconfig_data_reg[15:0]},
		table_43_data = {(({8{(~ write_skip)}} & reconfig_data_reg[15:8]) | ({8{write_skip}} & dprio_dataout_reg[15:8])), reconfig_data_reg[7:0]},
		table_44_data = {(({16{(~ write_skip)}} & reconfig_data_reg[15:0]) | ({16{write_skip}} & dprio_dataout_reg[15:0]))},
		table_46_data = {dprio_dataout_reg[15:10], (({10{(~ write_skip)}} & reconfig_data_reg[9:0]) | ({10{write_skip}} & dprio_dataout_reg[9:0]))},
		table_47_data = {dprio_dataout_reg[15:0]},
		table_75_data = {(((~ write_skip) & reconfig_data_reg[15]) | (write_skip & dprio_dataout_reg[15])), dprio_dataout_reg[14], (({2{(~ write_skip)}} & reconfig_data_reg[13:12]) | ({2{write_skip}} & dprio_dataout_reg[13:12])), dprio_dataout_reg[11], (({11{(~ write_skip)}} & reconfig_data_reg[10:0]) | ({11{write_skip}} & dprio_dataout_reg[10:0]))},
		table_76_data = {dprio_dataout_reg[15], (({9{(~ write_skip)}} & reconfig_data_reg[14:6]) | ({9{write_skip}} & dprio_dataout_reg[14:6])), dprio_dataout_reg[5:3], (({3{(~ write_skip)}} & reconfig_data_reg[2:0]) | ({3{write_skip}} & dprio_dataout_reg[2:0]))},
		table_77_data = {dprio_dataout_reg[15:14], (({14{(~ write_skip)}} & reconfig_data_reg[13:0]) | ({14{write_skip}} & dprio_dataout_reg[13:0]))},
		tx_pcs_max = 5'b00011,
		tx_pma_max = 5'b00110,
		tx_reconfig = 1'b1,
		wr_pulse = ((((write_state & (~ dprio_pulse)) & (~ write_done)) & ((wr_rd_pulse_reg & ((~ is_tier_1) | ((is_tier_1 & (~ header_proc)) & (((is_rcxpat_chnl_en_ch | write_skip) | bonded_skip) | is_protected_bit)))) | ((is_tier_1 & (~ header_proc)) & ((((~ is_rcxpat_chnl_en_ch) & (~ write_skip)) & (~ bonded_skip)) & (~ is_protected_bit))))) & (~ is_illegal_reg_d)),
		write_addr_inc = 1'b0,
		write_address = {1'b0, address_pres_reg[2], channel_address_out, {2{1'b1}}, {6{1'b0}}, {4{1'b0}}},
		write_all_int = (write_all & en_write_trigger),
		write_done = (((((((write_word_done & write_addr_inc) & write_happened) & is_analog_control) | (((delay_mif_head_out | delay_second_mif_head_out) | write_mif_word_done) | (reset_addr_done & is_tier_1))) | ((dprio_pulse & write_happened) & is_tier_2)) | (is_illegal_reg_out & write_state)) | reset_system),
		write_happened = wr_addr_inc_reg,
		write_mif_word_done = ((dprio_pulse & write_happened) & is_tier_1),
		write_reconfig_addr = {1'b0, address_pres_reg[2], (channel_address_out[1] | is_central_pcs), (channel_address_out[0] & (~ is_central_pcs)), (is_pma_mif_type & (~ is_central_pcs)), ((is_rx_mif_type & (~ is_central_pcs)) & (~ is_table_34)), {5{1'b0}}, dprio_addr_index[4:1], (is_table_35 | dprio_addr_index[0])},
		write_skip = (((is_tx_pcs | is_tx_pma) & (~ tx_reconfig)) | ((is_rx_pcs | is_rx_pma) & (~ rx_reconfig))),
		write_state = state_mc_reg,
		write_word_64_67_data_valid = 1'b0,
		write_word_68_6B_data_valid = 1'b0,
		write_word_done = 1'b0,
		write_word_preemp1t_data_valid = 1'b0,
		write_word_vodctrl_data_valid = 1'b0;
endmodule //c4gxb_altpll_reconfig_alt_c3gxb_reconfig_u4a1
//VALID FILE


// synopsys translate_off
`timescale 1 ps / 1 ps
// synopsys translate_on
module c4gxb_altpll_reconfig (
	logical_channel_address,
	reconfig_clk,
	reconfig_data,
	reconfig_fromgxb,
	reset_reconfig_address,
	write_all,
	busy,
	channel_reconfig_done,
	reconfig_address_en,
	reconfig_address_out,
	reconfig_togxb)/* synthesis synthesis_clearbox = 2 */;

	input	[3:0]  logical_channel_address;
	input	  reconfig_clk;
	input	[15:0]  reconfig_data;
	input	[19:0]  reconfig_fromgxb;
	input	  reset_reconfig_address;
	input	  write_all;
	output	  busy;
	output	  channel_reconfig_done;
	output	  reconfig_address_en;
	output	[5:0]  reconfig_address_out;
	output	[3:0]  reconfig_togxb;

	wire  sub_wire0;
	wire [3:0] sub_wire1;
	wire [5:0] sub_wire2;
	wire  sub_wire3;
	wire  sub_wire4;
	wire [0:0] sub_wire5 = 1'h1;
	wire [0:0] sub_wire7 = 1'h0;
	wire  reconfig_address_en = sub_wire0;
	wire [3:0] reconfig_togxb = sub_wire1[3:0];
	wire [5:0] reconfig_address_out = sub_wire2[5:0];
	wire  channel_reconfig_done = sub_wire3;
	wire  busy = sub_wire4;
	wire [2:0] sub_wire6 = {sub_wire7, sub_wire7, sub_wire5};

	c4gxb_altpll_reconfig_alt_c3gxb_reconfig_u4a1	c4gxb_altpll_reconfig_alt_c3gxb_reconfig_u4a1_component (
				.logical_channel_address (logical_channel_address),
				.reconfig_mode_sel (sub_wire6),
				.reset_reconfig_address (reset_reconfig_address),
				.reconfig_fromgxb (reconfig_fromgxb),
				.write_all (write_all),
				.reconfig_clk (reconfig_clk),
				.reconfig_data (reconfig_data),
				.reconfig_address_en (sub_wire0),
				.reconfig_togxb (sub_wire1),
				.reconfig_address_out (sub_wire2),
				.channel_reconfig_done (sub_wire3),
				.busy (sub_wire4))/* synthesis synthesis_clearbox=2
	 clearbox_macroname = alt_c3gxb_reconfig
	 clearbox_defparam = "cbx_blackbox_list=-lpm_mux;channel_address_width=4;intended_device_family=Cyclone IV GX;mif_address_width=6;number_of_channels=16;number_of_reconfig_ports=4;enable_buf_cal=true;reconfig_fromgxb_width=20;reconfig_togxb_width=4;" */;

endmodule

// ============================================================
// CNX file retrieval info
// ============================================================
// Retrieval info: PRIVATE: ADCE NUMERIC "0"
// Retrieval info: PRIVATE: CMU_PLL NUMERIC "0"
// Retrieval info: PRIVATE: DATA_RATE NUMERIC "0"
// Retrieval info: PRIVATE: INTENDED_DEVICE_FAMILY STRING "Cyclone IV GX"
// Retrieval info: PRIVATE: PMA NUMERIC "0"
// Retrieval info: PRIVATE: PROTO_SWITCH NUMERIC "1"
// Retrieval info: PRIVATE: SYNTH_WRAPPER_GEN_POSTFIX STRING "0"
// Retrieval info: CONSTANT: CBX_BLACKBOX_LIST STRING "-lpm_mux"
// Retrieval info: CONSTANT: CHANNEL_ADDRESS_WIDTH NUMERIC "4"
// Retrieval info: CONSTANT: INTENDED_DEVICE_FAMILY STRING "Cyclone IV GX"
// Retrieval info: CONSTANT: MIF_ADDRESS_WIDTH NUMERIC "6"
// Retrieval info: CONSTANT: NUMBER_OF_CHANNELS NUMERIC "16"
// Retrieval info: CONSTANT: NUMBER_OF_RECONFIG_PORTS NUMERIC "4"
// Retrieval info: CONSTANT: enable_buf_cal STRING "true"
// Retrieval info: CONSTANT: reconfig_fromgxb_width NUMERIC "20"
// Retrieval info: CONSTANT: reconfig_togxb_width NUMERIC "4"
// Retrieval info: USED_PORT: busy 0 0 0 0 OUTPUT NODEFVAL "busy"
// Retrieval info: USED_PORT: channel_reconfig_done 0 0 0 0 OUTPUT NODEFVAL "channel_reconfig_done"
// Retrieval info: USED_PORT: logical_channel_address 0 0 4 0 INPUT NODEFVAL "logical_channel_address[3..0]"
// Retrieval info: USED_PORT: reconfig_address_en 0 0 0 0 OUTPUT NODEFVAL "reconfig_address_en"
// Retrieval info: USED_PORT: reconfig_address_out 0 0 6 0 OUTPUT NODEFVAL "reconfig_address_out[5..0]"
// Retrieval info: USED_PORT: reconfig_clk 0 0 0 0 INPUT NODEFVAL "reconfig_clk"
// Retrieval info: USED_PORT: reconfig_data 0 0 16 0 INPUT NODEFVAL "reconfig_data[15..0]"
// Retrieval info: USED_PORT: reconfig_fromgxb 0 0 20 0 INPUT NODEFVAL "reconfig_fromgxb[19..0]"
// Retrieval info: USED_PORT: reconfig_togxb 0 0 4 0 OUTPUT NODEFVAL "reconfig_togxb[3..0]"
// Retrieval info: USED_PORT: reset_reconfig_address 0 0 0 0 INPUT NODEFVAL "reset_reconfig_address"
// Retrieval info: USED_PORT: write_all 0 0 0 0 INPUT NODEFVAL "write_all"
// Retrieval info: CONNECT: @logical_channel_address 0 0 4 0 logical_channel_address 0 0 4 0
// Retrieval info: CONNECT: @reconfig_clk 0 0 0 0 reconfig_clk 0 0 0 0
// Retrieval info: CONNECT: @reconfig_data 0 0 16 0 reconfig_data 0 0 16 0
// Retrieval info: CONNECT: @reconfig_fromgxb 0 0 20 0 reconfig_fromgxb 0 0 20 0
// Retrieval info: CONNECT: @reconfig_mode_sel 0 0 1 1 GND 0 0 1 1
// Retrieval info: CONNECT: @reconfig_mode_sel 0 0 1 2 GND 0 0 1 2
// Retrieval info: CONNECT: @reconfig_mode_sel 0 0 1 0 VCC 0 0 1 0
// Retrieval info: CONNECT: @reset_reconfig_address 0 0 0 0 reset_reconfig_address 0 0 0 0
// Retrieval info: CONNECT: @write_all 0 0 0 0 write_all 0 0 0 0
// Retrieval info: CONNECT: busy 0 0 0 0 @busy 0 0 0 0
// Retrieval info: CONNECT: channel_reconfig_done 0 0 0 0 @channel_reconfig_done 0 0 0 0
// Retrieval info: CONNECT: reconfig_address_en 0 0 0 0 @reconfig_address_en 0 0 0 0
// Retrieval info: CONNECT: reconfig_address_out 0 0 6 0 @reconfig_address_out 0 0 6 0
// Retrieval info: CONNECT: reconfig_togxb 0 0 4 0 @reconfig_togxb 0 0 4 0
// Retrieval info: GEN_FILE: TYPE_NORMAL c4gxb_altpll_reconfig.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL c4gxb_altpll_reconfig.inc FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL c4gxb_altpll_reconfig.cmp FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL c4gxb_altpll_reconfig.bsf FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL c4gxb_altpll_reconfig_inst.v FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL c4gxb_altpll_reconfig_bb.v TRUE
// Retrieval info: LIB_FILE: altera_mf
// Retrieval info: LIB_FILE: lpm
